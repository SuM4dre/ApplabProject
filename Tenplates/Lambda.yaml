AWSTemplateFormatVersion: '2010-09-09'

Description: >
  Template to create the Lambda function for the Application layer

Parameters:
  WebsiteBucketName:
    Type: String
    Description: "Libros Harinas y Semillas"
    Default: "librosharinasysemillas"

  DynamoDBName:
    Description: "Lista de precios"
    Type: String
    Default: "Productos"

Resources:
  # LambdaFunctionBucket Policy
  LambdaFunctionsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref WebsiteBucketName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}"
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${WebsiteBucketName}/mylambdafunction.zip'

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBName}'
              - Effect: Allow
                Action: 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${WebsiteBucketName}/mylambdafunction.zip'

  # Lambda Function
  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'mylambdafunction'
      Handler: 'index.handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref WebsiteBucketName
        S3Key: 'mylambdafunction.zip'
      Runtime: 'python3.12'
      Timeout: 15
      MemorySize: 128

  # API Gateway
  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'MyApi'
      Description: 'API para interactuar con Lambda y DynamoDB'

  # API Gateway Resource
  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGateway
          - RootResourceId
      PathPart: 'buscar'
      RestApiId:
        Ref: ApiGateway

  # API Gateway Method
  ApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId:
        Ref: ApiGatewayResource
      RestApiId:
        Ref: ApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - { LambdaArn: !GetAtt MyLambdaFunction.Arn }

  # Lambda Invoke Permission for API Gateway
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref MyLambdaFunction
      Principal: 'apigateway.amazonaws.com'

