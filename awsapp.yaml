### Template for AWS Services 
S3 Bucket: Almacena el sitio web est치tico.

CloudFront Distribution: Distribuye el contenido de S3.

DynamoDB Table: Almacena la informaci칩n de productos.

Lambda Function: Procesa solicitudes y consulta DynamoDB.

API Gateway: Gestiona las solicitudes HTTP/HTTPS.

Permissions: Configura los permisos necesarios para que API Gateway invoque la funci칩n Lambda.

########## 

AWSTemplateFormatVersion: '2010-09-09'
Description: Plantilla para la configuraci칩n de los servicios y recursos (S3, CloudFront, API Gateway, Lambda, DynamoDB)

Resources:
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'my-website-bucket'
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'error.html'

  MyCloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt MyS3Bucket.DomainName
            Id: 'S3Origin'
            S3OriginConfig: {}
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: 'S3Origin'
          ViewerProtocolPolicy: 'redirect-to-https'
          AllowedMethods: ['GET', 'HEAD']
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  MyDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 'Productos'
      AttributeDefinitions:
        - AttributeName: 'ProductID'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'ProductID'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'ProductQueryFunction'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::<ACCOUNT_ID>:role/execution_role'
      Code:
        S3Bucket: 'my-lambda-functions'
        S3Key: 'product-query.zip'
      Runtime: 'python3.8'
      Environment:
        Variables:
          TABLE_NAME: !Ref MyDynamoDBTable

  MyApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'ProductApi'
      Description: 'API Gateway for querying product information'

  MyApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - MyApiGateway
          - 'RootResourceId'
      PathPart: 'products'
      RestApiId: !Ref MyApiGateway

  MyApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      ResourceId: !Ref MyApiGatewayResource
      RestApiId: !Ref MyApiGateway
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations

  MyLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref MyLambdaFunction
      Principal: 'apigateway.amazonaws.com'
