AWSTemplateFormatVersion: '2010-09-09'

Description:
  Template to create the S3 bucket, CloudFront, DynamoDB, ApiGateway, and Lambda for the Application layer

Parameters:
  WebsiteBucketName:
    Type: String
    Description: "Libros Harinas y Semillas"
    Default: "Libros Harinas y Semillas"

  DynamoDBName:
    Description: "Lista de precios"
    Type: String
    Default: "Productos"

Resources:
  # S3 Bucket for Website
  swebsitebucketh:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref WebsiteBucketName
      AccessControl: PublicRead
      Tags:
        - Key: "Name"
          Value: !Ref 'swebsitebucketh'

  # Bucket para registros
  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'bucket-de-registros'
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: Enabled

  # Website Bucket Policy
  WebsiteBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref swebsitebucketh
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${WebsiteBucketName}/*'
    DependsOn: swebsitebucketh

  # DynamoDB Table
  ProductsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref DynamoDBName
      AttributeDefinitions:
        - AttributeName: ProductoID
          AttributeType: S
      KeySchema:
        - AttributeName: ProductoID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: "Name"
          Value: !Ref 'ProductsTable'

  # CloudFront Distribution
  WebsiteDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt swebsitebucketh.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        DefaultRootObject: index.html

  # Lambda Function
  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'MyLambdaFunction'
      Handler: 'index.handler'
      Role: 'arn:aws:iam::account-id:role/execution_role'
      Code:
        S3Bucket: 'lambda-functions-bucket'
        S3Key: 'my-lambda-function.zip'
      Runtime: 'nodejs14.x'
      Timeout: 10
      MemorySize: 128

