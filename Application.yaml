AWSTemplateFormatVersion: '2010-09-09'

Description:
  Template to create the S3 bucket, CloudFront, DynamoDB, ApiGateway, and Lambda for the Application layer

Parameters:

  WebsiteBucketName:
    Type: String
    Description: "Libros Harinas y Semillas"
    Default: "Libros Harinas y Semillas"

  DynamoDBName:
    Description: "Lista de precios"
    Type: String
    Default: "Productos"

Resources:

  # S3 Bucket for Website
  swebsitebucketh:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref WebsiteBucketName
      AccessControl: PublicRead
      Tags:
        - Key: "Name"
          Value: !Ref 'swebsitebucketh'

  # Bucket para registros
  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'bucket-de-registros'
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: Enabled

  # Website Bucket Policy
  WebsiteBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Websiteswebsitebucketh
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${Websiteswebsitebucketh}/*'

  # DynamoDB Table
  ProductsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref DynamoDBName
      AttributeDefinitions:
        - AttributeName: ProductoID
          AttributeType: S
      KeySchema:
        - AttributeName: ProductoID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: "Name"
          Value: !Ref 'ProductsTable'


